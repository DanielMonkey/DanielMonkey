Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-03-06T18:17:21+08:00

====== 04 C++ 数据类型 ======
Created Wednesday 06 March 2019

使用编程语言进行编程时，需要用到各种变量来存储各种信息。
变量保留的是它所存储的值的内存位置。这意味着，当创建一个变量时，就会在内存中保留一些空间。
你可能需要存储各种数据类型（比如字符型、宽字符型、整型、浮点型、双浮点型、布尔型等）的信息，操作系统会根据变量的数据类型，来分配内存和决定在保留内存中存储什么。

基本的内置类型
布尔型				bool
字符型				char
整型				int
浮点型				float
双浮点型			double
无类型				void
宽字符型			wchar_t

其实wchar_t是这样来的：
typedef wchar_t short int;
所以wchar_t实际上的空间和short int一样。

一些基本类型可以使用一个或多个类型修饰符进行修饰：
* signed
* unsigned
* short
* long

{{./pasted_image.png}}

变量的大小会根据编译器和所使用的电脑而有所不同。

endl,这将在没一行后插入一个换行符。
<<运算符用于向屏幕传多个值。

typedef 声明
可以使用typedef为一个已有的类型取一个新的名字。
typedef type newname;

枚举类型
枚举类型(enumeration)是C++中的一种派生数据类型，它是由用户的若干枚举常量的集合。
如果一个变量只有几种可能的值，可以定义为枚举(enumeration)类型。
所谓“枚举”是指将变量的值一一列举出来，变量的值只能在列举出来的值的范围内。
创建枚举，需要使用关键字enum。

如果枚举没有初始化，即省掉“=整型常数“时，则从第一个标识符开始。
默认情况下，第一个名称的值为0,第二个名称的值为1,第三个名称的值为2,以此类推。
但是，你也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。
enum color {red, green = 5, blue};
例如，在上面的枚举中，green的值为5。在这里，blue的值为6,因为默认情况下，每个名称都会比它前面一个名称大1,但red的值依然为0。


























