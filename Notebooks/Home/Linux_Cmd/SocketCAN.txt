Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-10-10T16:15:49+08:00

====== SocketCAN ======
Created Thursday 10 October 2019

Name: write
Prototype: ssize_t write (int filedes, const void *buffer, size_t size)
Description:
The write function writes up to size bytes from buffer to the file with descriptor filedes. The data in 
 buffer is not necessarily a character string and a null character is output like any other character. 

The return value is the number of bytes actually written. This may be size, but can always be smaller. 
 Your program should always call write in a loop, iterating until all the data is written. 

Once write returns, the data is enqueued to be written and can be read back right away, but it is not 
 necessarily written out to permanent storage immediately. You can use fsync when you need to be 
 sure your data has been permanently stored before continuing. (It is more efficient for the system to 
 batch up consecutive writes and do them all at once when convenient. Normally they will always be 
 written to disk within a minute or less.) Modern systems provide another function fdatasync which 
 guarantees integrity only for the file data and is therefore faster. You can use the O_FSYNC open 
 mode to make write always store the data to disk before returning; . 

In the case of an error, write returns -1. The following errno error conditions are defined for this 
 function: 


EAGAIN 	 Normally, write blocks until the write operation is complete. But if the O_NONBLOCK 
 flag is set for the file , it returns immediately without writing any data and reports this error. An 
 example of a situation that might cause the process to block on output is writing to a terminal 
 device that supports flow control, where output has been suspended by receipt of a STOP character. 

Compatibility Note: Most versions of BSD Unix use a different error code for this: EWOULDBLOCK. In 
 the GNU library, EWOULDBLOCK is an alias for EAGAIN, so it doesn't matter which name you use. 

On some systems, writing a large amount of data from a character special file can also fail with 
 EAGAIN if the kernel cannot find enough physical memory to lock down the user's pages. This is 
 limited to devices that transfer with direct memory access into the user's memory, which means it 
 does not include terminals, since they always use separate buffers inside the kernel. This problem 
 does not arise in the GNU system. 


	- EBADF The filedes argument is not a valid file descriptor, or is not open for writing. 


	- EFBIG The size of the file would become larger than the implementation can support. 


	- EINTR The write operation was interrupted by a signal while it was blocked waiting for 
	 completion. A signal will not necessarily cause write to return EINTR; it may instead result in a 
	 successful write which writes fewer bytes than requested. . 


	- EIO For many devices, and for disk files, this error code indicates a hardware error. 


	- ENOSPC The device containing the file is full. 


	- EPIPE This error is returned when you try to write to a pipe or FIFO that isn't open for reading by 
	 any process. When this happens, a SIGPIPE signal is also sent to the process; see Signal Handling. 


	- EINVAL In some systems, when writing to a character or block device, position and size offsets 
	 must be aligned to a particular block size. This error indicates that the offsets were not properly 
	 aligned. 

Unless you have arranged to prevent EINTR failures, you should check errno after each failing call to 
 write, and if the error was EINTR, you should simply repeat the call. . The easy way to do this is with 
 the macro TEMP_FAILURE_RETRY, as follows: 



		 nbytes = TEMP_FAILURE_RETRY (write (desc, buffer, count));

         

Please note that there is no function named write64. This is not necessary since this function does 
 not directly modify or handle the possibly wide file offset. Since the kernel handles this state 
 internally the write function can be used for all cases. 

This function is a cancellation point in multi-threaded programs. This is a problem if the thread 
 allocates some resources (like memory, file descriptors, semaphores or whatever) at the time write is 
 called. If the thread gets canceled these resources stay allocated until the program ends. To avoid 
 this, calls to write should be protected using cancellation handlers. 

The write function is the underlying primitive for all of the functions that write to streams, such as 
 fputc. 
Header files:
unistd.h
